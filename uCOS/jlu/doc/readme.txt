                         uC/OS-II, The Real-Time Kernel

                                Atmel AVR Port
                            for AVR-GCC version 3.x
                         uC/OS-II versions 2.52 and 2.70

                                 READ ME FILE


Acknowledgements:

- My work on this port has mainly been to modify Jesper Hansen's
port. Without his port, I wouldn't have used AVR in the first place,
and therefore my port would not exist. I have even taken this
readme.txt from his port and made the appropriate changes. Thanks
Jesper.

- Mr. J. Labrosse was kind enough to provide me with version 2.70 of
uC/OS-II in order to get the port to work with it. Thank you very
much, Jean.

------------------------------- AVR C COMPILER --------------------------------

1) This version of the avr-gcc port is based on version 3.x of avr-gcc.

   Versions of this port can be found at :

	http://ee.lut.fi/staff/Julius.Luukko/ucos-ii/index.html


2) It is assumed that the command line version of the GCC compiler is installed
   as described in the compiler documentation.

   I have tested the port with several versions of avr-gcc from the Winavr
   distribution (versions released in 2003) and also with Linux versions of the
   same tools (rpm distributions provided in 
   http://savannah.nongnu.org/download/avr-libc/snapshots/)

--------------------------------- AVR PORT NOTES ------------------------------

You can find the original readme.txt by Jesper Hansen as readme.txt.old. These
notes are for my changes:

1) In uC/OS-II version 2.70 the directory structure of uC/OS-II and
   the ports was changed a bit.  This port uses the new directory
   structure as documented in Application Note AN-2002, which is
   available from www.micrium.com. Therefore the port archive file has
   a directory Micrium/Software/uCOS-II/Ports/AVR/ATmega128/GNU/jlu/
   embedded in the file names. The port archive file can be unpacked
   anywhere you want, but you should retain the directory structure
   down the directory jlu. In Windows systems you probably should
   unpack the archive to the root directory of your C-drive, but that
   is not necessary. You do not need to have write permission to the
   port directories when developing applications.

After unpacking, you should have the following sub-directories:

Micrium/Software/uCOS-II/Ports/AVR/ATmega128/GNU/jlu/

       This directory contains the port source files.  

Micrium/Software/uCOS-II/Ports/AVR/ATmega128/GNU/jlu/STK500
       This directory contains the sample test code  (i.e. test.c),  as well as
       a makefile, which is based on the sample makefile from the Winavr
       distribution. Be sure to read the README of the test project. Although
       marked as being for STK500 development board, it does not have anything
       that is tied up to the STK500 board.

Micrium/Software/uCOS-II/Ports/AVR/ATmega128/GNU/jlu/doc
       Contains this readme file and any other documentation that comes with
       the port.

2) I have also included some macros, which help you to program
   uC/OS-II compliant ISRs with C. These macros can be found in
   avr_isr.h in the port directory. See the example program for help
   in using the macros.

3) The port has only been tested with ATmega128 with STK-500+STK-501
   boards with no external memory. If you want to test the port with
   as little memory, you may disable the compiler the generation of
   debugging information ( the -g option from CFLAGS in the makefile)
   in order to fit the data in the RAM.

4) TIMER0 overflow interrupt is used to generate the clock tick (see
   os_cpu_a.asm). You must set the clock tick rate to suit your system
   and needs. You can change the clock tick rate for each application
   in os_cfg.h (see the example project) . If you have a different
   chip, chances are that the TCCR0 value 0x07 must be changed to 0x05
   in order to set the clock divider to 1024 (see the example
   program).

5) I have succesfully run the example program with AVR Studio 3.56 with the
   exception of the usual problems with debugging coff files generated by
   avr-gcc and the related tools.

6) You can compile your uC/OS-II projects with a unix version of avr-gcc 
   provided that you modify the sources of uC/OS-II the correspond to your
   directory structure. Only ucos_ii.c has to be modified so that the includes
   do not have absolute filenames. Change all the includes as follows

#include "\software\ucos-ii\source\os_core.c" /* Original */
#include <os_core.c>                          /* Replacement */

   From uC/OS-II version 2.70 this is no longer necessary.

7) You will also need the source code for uC/OS-II to compile this
   port. The uC/OS-II source for version 2.52 is included in Jean
   Labrosse's book "MicroC/OS-II, The Real Time Kernel". More
   information about uC/OS-II can be found at www.ucos-ii.com or
   www.micrium.com.

8) Although the port is labeled for ATmega128, I have tried my best to
   support other AVR processors. I haven't got the necessary hardware to test
   it though.

9) If you have uC/OS-II v2.52, see the README file of the example project.

----------------------------- REPORTING PROBLEMS ------------------------------

If you find a bug in this port, do not hesitate to report the problem
to me (Julius Luukko) through e-mail Julius.Luukko@lut.fi.


Enjoy!!


------------------------------ AVR RELEASE NOTES ------------------------------

April 2, 2001: V1.00 (Jesper Hansen)
-----------------------

 1) First release of AVR port for AVR-GCC

February 27, 2003: V1.10 (Julius Luukko)
-----------------------

 1) First release of AVR port for AVR-GCC v. 3.x


February 27, 2003: V1.11
-----------------------

 1) Added RAMPZ to the registers, which are saved to the stack. I haven't tested
    any programs, however, where RAMPZ might be other than zero.


March 18, 2003: V1.12
-----------------------

 1) Fixed a serious bug in the handling of SREG in interrupt service routines
    (including OSTickISR). I bit of SREG is now set before pushing SREG onto
    the stack. Corrected also a bug in the order of popping RAMPZ and SREG from
    the stack.
 2) Changed the RCALLs to CALLs in os_cpu_a.asm. This way the called subroutines
    need not to be in the neighborhood (i.e. +- 2kwords) of the calls. This fixes
    the error message "relocating truncated to fit" from the linker.

June 14, 2003: V1.13
-----------------------

 1) Added a working example in the test directory. The test uses a slightly
    modified makefile from the Winavr distribution.

 2) Several mainly code style related fixes to the port files (os_cpu_[a,c].*) and
    avr_isr.h

 3) The port should now work with other AVRs than ATmega128. Test results are welcome.

 4) Linker scripts are no longer provided since you are not supposed to modify the
    scripts any more. The use of external SRAM is documented in the avr-libc
    documentation. I have not tested the port with external RAM.

July 21, 2003: v1.20
-----------------------

 1) Updated the port to support version 2.70 of uC/OS-II. The port
    still works with version 2.52.

