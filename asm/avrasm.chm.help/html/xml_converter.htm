<!doctype HTML public "-//W3C//DTD HTML 4.0 Frameset//EN">

<html>

<!--(==============================================================)-->
<!--(Document created with RoboEditor. )============================-->
<!--(==============================================================)-->

<head>

<title>XML Converter</title>

<!--(Meta)==========================================================-->

<meta http-equiv=content-type content="text/html; charset=windows-1252">
<meta name=generator content="RoboHELP by eHelp Corporation - www.ehelp.com">
<meta name=generator-major-version content=0.1>
<meta name=generator-minor-version content=1>
<meta name=filetype content=kadov>
<meta name=filetype-version content=1>
<meta name=page-count content=1>
<meta name=layout-height content=2048>
<meta name=layout-width content=682>


<!--(Links)=========================================================-->

<link rel="StyleSheet" href="../main.css">



</head>

<!--(Body)==========================================================-->


<body><script language="javascript"> 
        if ((window.name != "content") && (navigator.userAgent.indexOf("Opera") <= -1) ) 
        document.write("<center><a href='../index.html?page=Html/XML_Converter.htm'>show framing</a></center>")
        </script>

<h2>XML Converter</h2>

<ul style="list-style: disc;"
	type=disc>
	
	<li class=kadov-p><p><a href="xml_converter.htm#location">Location 
 and invocation</a></p></li>
	
	<li class=kadov-p><p><a href="xml_converter.htm#create">Example: Create 
 assembler include file</a></p></li>
	
	<li class=kadov-p><p><a href="xml_converter.htm#create1">Example: Create 
 header files for IAR Compiler</a></p></li>
	
	<li class=kadov-p><p><a href="xml_converter.htm#create2">Example: Create 
 header files for GCC</a></p></li>
	
	<li class=kadov-p><p><a href="xml_converter.htm#changelog">Changelog</a></p></li>
</ul>

<h3><a name=Introduction></a>Introduction</h3>

<p>The XML Converter is a separate command-line tool used to produce assembler 
 include files and C header files from the part description files (XML) 
 used by AVR Studio.</p>

<p>All assembler include files for AVR Assembler 2 in the AVR Studio distribution 
 are produced using this tool. The tool is also capable of producing header 
 files for AVR-GCC and the IAR C compiler, in addition to &quot;generic&quot; 
 (not compiler-specific) C header files.</p>

<p>The XML converter program is presently not available from the AVR Studio 
 GUI, and must be invoked from the command line.</p>

<h3><a name=Location></a>Location and invocation</h3>

<p>The following assumes AVR Studio is installed in the default directory<span 
 style="font-family: 'Courier New', monospace;"><br>
C:\Program Files\Atmel\AVR Tools</span>. If that is not the case, adjust 
 the following accordingly.</p>

<p>The XML converter is located here:</p>

<p style="font-family: 'Courier New', monospace;">C:\Program Files\Atmel\AVR 
 Tools\AvrStudio4\xmlconvert.exe</p>

<p>For convenient access, the XML converter directory should be included 
 in PATH, this can be done from Control panel -&gt; System Properties, 
 or from the command line with the following command:</p>

<p style="font-family: 'Courier New', monospace;">PATH = %PATH%;&quot;C:\Program 
 Files\Atmel\AVR Tools\AvrStudio4&quot;</p>

<p>Assuming this is in place, the XML converter can be accessed by typing 
 <span style="font-family: 'Courier New', monospace; font-weight: bold;">xmlconvert</span><span 
 style="font-family: 'Courier New', monospace;"> </span><span style="font-family: Verdana, sans-serif;">from 
 the command prompt. </span>When invoked without arguments, xmlconvert 
 print a usage message:</p>

<p class=Preformatted-code
	style="font-family: 'Courier New', monospace; font-size: x-small;">xmlconvert: No source file specified<br>
Usage: xmlconvert [-f output-format] [-o outdir] [-1nbclV] infile ...<br>
 <!--kadov_tag{{<spaces>}}-->&nbsp;&nbsp;&nbsp;<!--kadov_tag{{</spaces>}}-->Output formats: a[vrasm] | g[cc] | i[ar] | c[c] (generic c)<br>
Options:<br>
 <!--kadov_tag{{<spaces>}}-->&nbsp;&nbsp;&nbsp;<!--kadov_tag{{</spaces>}}-->-1 <!--kadov_tag{{<spaces>}}-->&nbsp;<!--kadov_tag{{</spaces>}}-->= Don't generate AVRASM2 #pragma's<br>
 <!--kadov_tag{{<spaces>}}-->&nbsp;&nbsp;&nbsp;<!--kadov_tag{{</spaces>}}-->-n <!--kadov_tag{{<spaces>}}-->&nbsp;<!--kadov_tag{{</spaces>}}-->= Don't warn about bad names<br>
 <!--kadov_tag{{<spaces>}}-->&nbsp;&nbsp;&nbsp;<!--kadov_tag{{</spaces>}}-->-b <!--kadov_tag{{<spaces>}}-->&nbsp;<!--kadov_tag{{</spaces>}}-->= use DISPLAY_BITS attribute to limit bit definitions<br>
 <!--kadov_tag{{<spaces>}}-->&nbsp;&nbsp;&nbsp;<!--kadov_tag{{</spaces>}}-->-c <!--kadov_tag{{<spaces>}}-->&nbsp;<!--kadov_tag{{</spaces>}}-->= Add some definitions for compatibility with old files<br>
 <!--kadov_tag{{<spaces>}}-->&nbsp;&nbsp;&nbsp;<!--kadov_tag{{</spaces>}}-->-l <!--kadov_tag{{<spaces>}}-->&nbsp;<!--kadov_tag{{</spaces>}}-->= Produce linker file (IAR only)<br>
 <!--kadov_tag{{<spaces>}}-->&nbsp;&nbsp;&nbsp;<!--kadov_tag{{</spaces>}}-->-q <!--kadov_tag{{<spaces>}}-->&nbsp;<!--kadov_tag{{</spaces>}}-->= Allow linked register quadruple (32-bit)<br>
 <!--kadov_tag{{<spaces>}}-->&nbsp;&nbsp;&nbsp;<!--kadov_tag{{</spaces>}}-->-V <!--kadov_tag{{<spaces>}}-->&nbsp;<!--kadov_tag{{</spaces>}}-->= print xmlconvert version number</p>

<p>The AVR part description files reside in <span style="font-family: 'Courier New', monospace;">C:\Program 
 Files\Atmel\AVR Tools\Partdescriptionfiles</span><span style="font-family: Verdana, sans-serif;">. 
 There is one file per part. The use is simplest explained by some examples:</span></p>

<h4 style="font-family: Verdana, sans-serif;"><a name="Create assembler include file"></a>Create 
 assembler include file for mega128</h4>

<p style="font-family: 'Courier New', monospace;">xmlconvert -c -o c:\Work\Tmp 
 &quot;C:\Program Files\Atmel\AVR Tools\Partdescriptionfiles\ATmega128.xml&quot;</p>

<p style="font-family: Verdana, sans-serif;">This creates an assembler 
 include file for mega128 in the output directory C:\Work\Tmp. If the -o 
 option is omitted, the output file(s) will be located in the same directory 
 as the input file.</p>

<p style="font-family: Verdana, sans-serif; font-style: italic;"><span 
 style="font-weight: bold;">Note</span>: The <span style="font-weight: bold;">-c</span> 
 option should always be used, if the created files are to be compatible 
 with existing files.</p>

<p style="font-family: Verdana, sans-serif;">The output file from this 
 command will be C:\Work\Tmp\m128def.inc.</p>

<h4><a name=Create1></a>Create header and link files for all devices for 
 the IAR C compiler</h4>

<p style="font-family: 'Courier New', monospace;">cd &quot;C:\Program Files\Atmel\AVR 
 Tools\Partdescriptionfiles&quot;<br>
xmlconvert -c -n -fiar -l -o C:\Work\tmp *.xml</p>

<p style="font-family: Verdana, sans-serif;">When using multiple input 
 files it is recommended to cd to the source directory first. The <span 
 style="font-weight: bold;">-fiar</span> option requests IAR output files, 
 the <span style="font-weight: bold;">-l</span> option requests linker 
 file creation, the <span style="font-weight: bold;">-n</span> option suppresses 
 some warning messages.</p>

<p style="font-family: Verdana, sans-serif; font-style: italic;"><span 
 style="font-weight: bold;">Note:</span> the linker file facility is somewhat 
 experimental and the resulting file may require editing before being usable, 
 depending on device. Please consult the IAR manuals for details about 
 these files.</p>

<h4><a name=Create2></a>Create header files for all devices for the AVR-GCC 
 compiler</h4>

<p style="font-family: 'Courier New', monospace;">cd &quot;C:\Program Files\Atmel\AVR 
 Tools\Partdescriptionfiles&quot;<br>
xmlconvert -c -n -fgcc -o C:\Work\tmp *.xml</p>

<p style="font-family: Verdana, sans-serif;">This is almost the same command 
 as in the previous example, except for using <span style="font-weight: bold;">-fgcc</span> 
 to specify gcc output files, and omitting the <span style="font-weight: bold;">-l</span> 
 option, which does nothing for gcc.</p>

<h3>File name conventions</h3>

<p>The XML part description files are always named <span style="font-style: italic;">devicename</span>.xml. 
 The following conventions are used for producing assembler file names 
 for various AVR device families. <!--kadov_tag{{<spaces>}}-->&nbsp;<span 
 style="font-style: italic;"><!--kadov_tag{{</spaces>}}-->nnn</span> refers 
 to the number section of a device name (e.g., 2313 in ATtiny2313).</p>

<ul style="list-style: disc;"
	type=disc>
	
	<li class=kadov-p><p>Classic AVR devices: AT90S<span style="font-style: italic;">nnn</span> 
 -&gt; <span style="font-style: italic;">nnn</span>def.inc. Example: AT90S8515 
 -&gt; 8515def.inc</p></li>
	
	<li class=kadov-p><p>Tiny AVR devices: ATtiny<span style="font-style: italic;">nnn</span> 
 -&gt; tn<span style="font-style: italic;">nnn</span>def.inc. Example: 
 ATtiny13 -&gt; tn13def.inc</p></li>
	
	<li class=kadov-p><p>Mega AVR devices: <!--kadov_tag{{<spaces>}}-->&nbsp;<!--kadov_tag{{</spaces>}}-->ATmega<span 
 style="font-style: italic;">nnn</span> -&gt; m<span style="font-style: italic;">nnn</span>def.inc. 
 Example: ATmega644 -&gt; m644def.inc</p></li>
	
	<li class=kadov-p><p>AVR CAN devices: <!--kadov_tag{{<spaces>}}-->&nbsp;<!--kadov_tag{{</spaces>}}-->AT90CAN<span 
 style="font-style: italic;">nnn</span> -&gt; can<span style="font-style: italic;">nnn</span>def.inc. 
 Example: AT90CAN128 -&gt; can128def.inc</p></li>
	
	<li class=kadov-p><p>AVR PWM devices: AT90PWM<span style="font-style: italic;">nnn</span> 
 -&gt; pwm<span style="font-style: italic;">nnn</span>def.inc. Example: 
 AT90PWM3 -&gt; pwm3def.inc</p></li>
</ul>

<p>When producing header files for the C compilers (IAR, GCC) XML converter 
 attempts to follow the conventions used by the respective compiler manufacturers. 
 For instance, both IAR and GCC will call the ATmega128 header file iom128.h. 
 The XML converter obeys these conventions as far as they are known/documented.</p>

<p>If the 'generic C' format is selected, the header files are simply named 
 <span style="font-style: italic;">device</span><span>.h, e.g., ATmega128.h.</span></p>

<h3><a name=Changelog></a>Changelog</h3>

<h4>Version 2.20, released with AVR Studio 4.12</h4>

<ul style="list-style: disc;"
	type=disc>
	
	<li class=kadov-p><p>Minor bug fixes and enhancements only.</p></li>
</ul>

<h4>Version 2.17, released with AVR Studio 4.11 SP1</h4>

<ul style="list-style: disc;"
	type=disc>
	
	<li class=kadov-p><p>Removed bogus EEADRBITS output for parts without 
 EEPROM</p></li>
	
	<li class=kadov-p><p>Added support for tiny28 LowLevel interrupt vector</p></li>
	
	<li class=kadov-p><p>Added experimental support for 32-bit register 
 quadruples (-q option).</p></li>
	
	<li class=kadov-p><p>Wrong output file name if upper/lower case mismatch 
 in input filename.</p></li>
</ul>

<p>&nbsp;</p>

</body>

</html>
