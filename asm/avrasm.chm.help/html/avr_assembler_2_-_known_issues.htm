<!doctype HTML public "-//W3C//DTD HTML 4.0 Frameset//EN">

<html>

<!--(==============================================================)-->
<!--(Document created with RoboEditor. )============================-->
<!--(==============================================================)-->

<head>

<title>AVR Assembler 2 - Known Issues</title>

<!--(Meta)==========================================================-->

<meta http-equiv=content-type content="text/html; charset=windows-1252">
<meta name=generator content="RoboHELP by eHelp Corporation - www.ehelp.com">
<meta name=generator-major-version content=0.1>
<meta name=generator-minor-version content=1>
<meta name=filetype content=kadov>
<meta name=filetype-version content=1>
<meta name=page-count content=1>
<meta name=layout-height content=1484>
<meta name=layout-width content=709>


<!--(Links)=========================================================-->

<link rel="StyleSheet" href="../main.css">



</head>

<!--(Body)==========================================================-->


<body><script language="javascript"> 
        if ((window.name != "content") && (navigator.userAgent.indexOf("Opera") <= -1) ) 
        document.write("<center><a href='../index.html?page=Html/AVR_Assembler_2_-_Known_Issues.htm'>show framing</a></center>")
        </script>

<h2>AVR Assembler 2 - Known Issues</h2>

<p>The following AVRASM2 bugs/issues are known at the time of release. 
 Please note that the <a href="known_issues.htm">AVRASM1 known issues</a> 
 do not apply to AVRASM2. and vice versa. </p>

<p><a href="avr_assembler_2_-_known_issues.htm#missing_newline_at_end_of_file">Missing 
 newline at end of file</a><a href="avr_assembler_2_-_known_issues.htm#comments_in_macro_calls"><br>
Comments in macro calls</a><a href="avr_assembler_2_-_known_issues.htm#increment/decrement"><br>
Increment/decrement operators</a><a href="avr_assembler_2_-_known_issues.htm#forward_references"><br>
Forward references in conditionals</a><a href="avr_assembler_2_-_known_issues.htm#error_messages"><br>
Error messages</a><a href="avr_assembler_2_-_known_issues.htm#preprocessor_issues"><br>
Preprocessor issues</a></p>

<h3><a name=Missing_newline_at_end_of_file></a>Missing newline at end of 
 file</h3>

<p>AVRASM2 has some issues if the last line in a source file is missing 
 a newline: Error messages may refer to wrong filename/line number if the 
 error is in the last line of a included files, and in some cases syntax 
 errors may result. <span style="font-style: italic;">Beware that the AVR 
 Studio editor will </span><span style="font-weight: bold; font-style: italic;">not</span><span 
 style="font-style: italic;"> append a missing newline at the end of a 
 source file automatically.</span></p>

<h3><a name="Increment/decrement"></a>Increment/decrement operators</h3>

<p>Increment/decrement operators (++/--) are recognized by the assembler 
 and may cause surprises, e.g. <span style="font-family: 'Courier New', monospace;">symbol--1</span><span 
 style="font-family: Verdana, sans-serif;"> will cause a syntax error, 
 write </span><span style="font-family: 'Courier New', monospace;">symbol 
 - -1 </span><span style="font-family: Verdana, sans-serif;">if that is 
 what is intended</span><span style="font-family: 'Courier New', monospace;">. 
 This behaviour is consistent with the C preprocessor.</span></p>

<h3><a name=Forward_references></a>Forward references in conditionals</h3>

<p>Using a forward reference in an assembler conditional may cause surprises, 
 and is not allowed. Example:</p>

<p class=Preformatted-code>.ifdef FOO <!--kadov_tag{{<spaces>}}-->&nbsp;<!--kadov_tag{{</spaces>}}--><br>
 <!--kadov_tag{{<spaces>}}-->&nbsp;<!--kadov_tag{{</spaces>}}-->nop ; some code here<br>
.endif<br>
 <!--kadov_tag{{<spaces>}}-->&nbsp;<!--kadov_tag{{</spaces>}}-->rjmp label<br>
 <!--kadov_tag{{<spaces>}}-->&nbsp;<!--kadov_tag{{</spaces>}}-->; more code here<br>
.equ FOO = 100<br>
label:<br>
 <!--kadov_tag{{<spaces>}}-->&nbsp;<!--kadov_tag{{</spaces>}}-->nop<br>&nbsp;</p>

<p>In this example FOO is not defined at the point it is used in a conditional, 
 and the programmer's intention is not clear. </p>

<p>The following seemingly reasonable example will cause the same type 
 of error:</p>

<pre wrap>
<p class=Preformatted-code>.org LARGEBOOTSTART
; the following sets up RAMPZ:Z to point to a FLASH data object, typically
; for use with ELPM.
 <!--kadov_tag{{<spaces>}}-->&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<!--kadov_tag{{</spaces>}}-->ldi ZL, low (cmdtable * 2)
 <!--kadov_tag{{<spaces>}}-->&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<!--kadov_tag{{</spaces>}}-->ldi ZH, high (cmdtable * 2)
.if ((cmdtable * 2) &gt; 65535)
 <!--kadov_tag{{<spaces>}}-->&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<!--kadov_tag{{</spaces>}}-->ldi r16, 1
 <!--kadov_tag{{<spaces>}}-->&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<!--kadov_tag{{</spaces>}}-->sts RAMPZ, r16
.endif
 <!--kadov_tag{{<spaces>}}-->&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<!--kadov_tag{{</spaces>}}-->; more code follows here
cmdtable: .db &quot;foo&quot;, 0x0</p>
</pre>

<p>The reason for this is that the outcome of the conditional will influence 
 the value of the forward referenced label, which in turn may affect the 
 outcome of the conditional, and so on.</p>

<p>Up to and including AVRASM 2.0.30, these situations were not always 
 properly detected, causing incomprehensible error messages. Starting with 
 2.0.31, explicit error messages are given.</p>

<p>Note that with preprocessor conditionals (#if/#ifdef), the situation 
 is well-defined, preprocessor symbols are always undefined until the definition 
 is seen. and this kind of error will never occur.</p>

<h3 style="font-family: Verdana, sans-serif;"><a name=Error_messages></a>Error 
 messages</h3>

<p>Sometimes error messages may be hard to understand. Typically, a simple 
 typo in some instances may produce error messages like this:</p>

<p style="font-family: 'Courier New', monospace;">myfile.asm(30): error: 
 syntax error, unexpected FOO</p>

<p>where FOO represents some incomprehensible gibberish. <!--kadov_tag{{<spaces>}}-->&nbsp;<!--kadov_tag{{</spaces>}}-->The 
 referenced filename/line number is correct, however.</p>

<h3><a name=Preprocessor_issues></a>Preprocessor issues</h3>

<ul style="list-style: disc;"
	type=disc>
	
	<li class=kadov-p><p>The preprocessor will not detect invalid preprocessor 
 directives inside a false conditional. This may lead to surprises with 
 typos like this:<span style="font-family: 'Courier New', monospace;"><br>
	#if __ATmega8__ <br>
	//... <br>
	#elseif __ATmega16__ <!--kadov_tag{{<spaces>}}-->&nbsp;&nbsp;<!--kadov_tag{{</spaces>}}-->// 
 </span><span style="font-family: 'Courier New', monospace; font-weight: bold;">WRONG, 
 the correct directive is #elif</span><span style="font-family: 'Courier New', monospace;"><br>
	 <!--kadov_tag{{<spaces>}}-->&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<!--kadov_tag{{</spaces>}}-->// 
 This will go undetected if __ATmega8__ is false<br>
	//... <br>
	#else <br>
	// when __ATmega8__ is false this section will be assembled even if<br>
	// __ATmega16__ is true. <br>
	#endif</span> <br>
	It is debatable if this is a bug, the behaviour is consistent with 
 the C preprocessor.</p></li>
	
	<li class=kadov-p><p>The preprocessor incorrectly allows additional 
 text after directives, which may cause surprises, e.g.,<span style="font-family: 'Courier New', monospace;"><br>
	#endif #endif</span><span style="font-family: Verdana, sans-serif;"><br>
	will be interpreted as a single #endif directive, without any error 
 or warning message.</span></p></li>
</ul>

<p>&nbsp;</p>

</body>

</html>
